---
- name: Ensure kube-apiserver is up before upgrade
  import_tasks: check-api.yml

- name: Kubeadm | Upgrade control plane nodes
  vars:
    # kubeadm upgrade apply on v1.30 will always fail if --config is used during upgrade, but newer versions support --config if using UpgradeConfiguration
    # kubeadm-config.v1beta4 with UpgradeConfiguration requires some values that were previously allowed as args to be specified in the config file
    kubeadm_upgrade_apply_command: >-
      timeout -k 600s 600s
      {{ bin_dir }}/kubeadm upgrade apply -y {{ kube_version }}
      {%- if kube_major_version != 'v1.30' %}
      --config={{ kube_config_dir }}/kubeadm-config.yaml
      {%- endif -%}
      {%- if kubeadm_config_api_version == 'v1beta3' %}
      --certificate-renewal={{ kubeadm_upgrade_auto_cert_renewal }}
      --ignore-preflight-errors={{ kubeadm_ignore_preflight_errors | join(',') }}
      --allow-experimental-upgrades
      --etcd-upgrade={{ (etcd_deployment_type == "kubeadm") | lower }}
      {% if kubeadm_patches | length > 0 %}--patches={{ kubeadm_patches_dir }}{% endif %}
      --force
      {%- endif -%}
  environment:
    PATH: "{{ bin_dir }}:{{ ansible_env.PATH }}"
  block:
  - name: Kubeadm | Upgrade first control plane node
    command: "{{ kubeadm_upgrade_apply_command }}"
    register: kubeadm_upgrade
    when: inventory_hostname == first_kube_control_plane
    failed_when: kubeadm_upgrade.rc != 0 and "field is immutable" not in kubeadm_upgrade.stderr

  - name: Kubeadm | Upgrade other control plane nodes
    command: "{{ kubeadm_upgrade_apply_command }}"
    register: kubeadm_upgrade
    when: inventory_hostname != first_kube_control_plane
    failed_when: kubeadm_upgrade.rc != 0 and "field is immutable" not in kubeadm_upgrade.stderr

# kubeadm upgrade apply will no longer reconcile ClusterConfiguration changes, this must be done separately after upgrade to ensure the latest config is applied
- name: Update kubeadm configmap after upgrade
  command: "{{ bin_dir }}/kubeadm init phase upload-config kubeadm --config {{ kube_config_dir }}/kubeadm-config.yaml"
  register: kubeadm_upload_config
  # Retry is because upload config sometimes fails
  retries: 3
  until: kubeadm_upload_config.rc == 0
  when:
  - inventory_hostname == first_kube_control_plane

- name: Rewrite kubeadm managed etcd static pod manifests with updated configmap
  command: "{{ bin_dir }}/kubeadm init phase control-plane all --config {{ kube_config_dir }}/kubeadm-config.yaml"
  when:
  - etcd_deployment_type == "kubeadm"
  notify: Control plane | restart kubelet

- name: Rewrite kubernetes control plane static pod manifests with updated configmap
  command: "{{ bin_dir }}/kubeadm init phase control-plane all --config {{ kube_config_dir }}/kubeadm-config.yaml"
  notify: Control plane | restart kubelet

- name: Flush kubelet handlers
  meta: flush_handlers

- name: Ensure kube-apiserver is up after upgrade and control plane configuration updates
  import_tasks: check-api.yml

- name: Kubeadm | Remove binding to anonymous user
  command: "{{ kubectl }} -n kube-public delete rolebinding kubeadm:bootstrap-signer-clusterinfo --ignore-not-found"
  when: remove_anonymous_access

- name: Kubeadm | clean kubectl cache to refresh api types
  file:
    path: "{{ item }}"
    state: absent
  with_items:
  - /root/.kube/cache
  - /root/.kube/http-cache

# FIXME: https://github.com/kubernetes/kubeadm/issues/1318
- name: Kubeadm | scale down coredns replicas to 0 if not using coredns dns_mode
  command: >-
    {{ kubectl }}
    -n kube-system
    scale deployment/coredns --replicas 0
  register: scale_down_coredns
  retries: 6
  delay: 5
  until: scale_down_coredns is succeeded
  run_once: true
  when:
  - kubeadm_scale_down_coredns_enabled
  - dns_mode not in ['coredns', 'coredns_dual']
  changed_when: false
